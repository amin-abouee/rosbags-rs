name: CI

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-latest]
        rust: [stable, beta]
        include:
          # Test nightly only on Ubuntu 22.04 to reduce CI load
          - os: ubuntu-22.04
            rust: nightly

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-22.04'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-22.04'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build (all features)
      run: cargo build --verbose --all-features

    - name: Run tests (all features)
      run: cargo test --verbose --all-features

    - name: Build (default features)
      run: cargo build --verbose

    - name: Run tests (default features)
      run: cargo test --verbose

    - name: Build (no default features)
      run: cargo build --verbose --no-default-features

    - name: Build (sqlite only)
      run: cargo build --verbose --no-default-features --features sqlite

    - name: Build (mcap only)
      run: cargo build --verbose --no-default-features --features mcap

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --all-features --no-deps
      env:
        RUSTDOCFLAGS: "-D warnings"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-examples-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build examples
      run: cargo build --examples --all-features
    
    - name: Check example compilation
      run: |
        for example in examples/*.rs; do
          if [ -f "$example" ]; then
            example_name=$(basename "$example" .rs)
            echo "Checking example: $example_name"
            cargo check --example "$example_name"
          fi
        done

  minimum-rust-version:
    name: Minimum Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install minimum Rust version
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: "1.70"
    
    - name: Check with minimum Rust version
      run: cargo check --all-features



  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check if ready for release
      run: |
        cargo check --all-features
        cargo package --allow-dirty
        echo "âœ… Package is ready for release"


